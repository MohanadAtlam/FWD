
EXTI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c7  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d7  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a0  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  74:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GIE_Enable>:
EN_EXTIError_t EXTI_IntDisable(void)
{
	CLR_BIT(GICR,GICR_INT0);
	
	return EXTI_OK;
}
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	08 95       	ret

00000086 <EXTI_Int0SenseControl>:
  86:	85 b7       	in	r24, 0x35	; 53
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	85 bf       	out	0x35, r24	; 53
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 bf       	out	0x35, r24	; 53
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	08 95       	ret

00000096 <EXTI_IntEnable>:
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	08 95       	ret

000000a0 <EXTI_Int0SetCallBack>:

EN_EXTIError_t EXTI_Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
	if(Copy_pvInt0Func != 0)
  a0:	00 97       	sbiw	r24, 0x00	; 0
  a2:	31 f0       	breq	.+12     	; 0xb0 <EXTI_Int0SetCallBack+0x10>
	{
		EXTI_pvInt0PtrFunc=Copy_pvInt0Func;
  a4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return EXTI_OK;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	08 95       	ret
	}
	return SET_CALL_BACK_ERROR;
  b0:	81 e0       	ldi	r24, 0x01	; 1
}
  b2:	08 95       	ret

000000b4 <__vector_1>:

void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	if (EXTI_pvInt0PtrFunc != NULL)
  d6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	30 97       	sbiw	r30, 0x00	; 0
  e0:	09 f0       	breq	.+2      	; 0xe4 <__vector_1+0x30>
	{
		EXTI_pvInt0PtrFunc();
  e2:	09 95       	icall
	}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	7f 91       	pop	r23
  f2:	6f 91       	pop	r22
  f4:	5f 91       	pop	r21
  f6:	4f 91       	pop	r20
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <led_on>:
    }
}

void led_on()
{
	DDRA |= (1<<0);
 106:	8a b3       	in	r24, 0x1a	; 26
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<0);
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f eb       	ldi	r18, 0xBF	; 191
 114:	87 e2       	ldi	r24, 0x27	; 39
 116:	99 e0       	ldi	r25, 0x09	; 9
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <led_on+0x12>
 120:	00 c0       	rjmp	.+0      	; 0x122 <led_on+0x1c>
 122:	00 00       	nop
	_delay_ms(3000);
	PORTA &= ~(1<<0);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	08 95       	ret

0000012c <main>:
void led_on();

int main(void)
{
	//enable the interrupt
	if(GIE_Enable()==GIE_OK);
 12c:	0e 94 3e 00 	call	0x7c	; 0x7c <GIE_Enable>
	if(EXTI_IntEnable()==EXTI_OK);
 130:	0e 94 4b 00 	call	0x96	; 0x96 <EXTI_IntEnable>
	if(EXTI_Int0SenseControl()==EXTI_OK);
 134:	0e 94 43 00 	call	0x86	; 0x86 <EXTI_Int0SenseControl>
	//Passing the function that will be called of the interrupt happened
	if(EXTI_Int0SetCallBack(led_on)==EXTI_OK);
 138:	83 e8       	ldi	r24, 0x83	; 131
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 50 00 	call	0xa0	; 0xa0 <EXTI_Int0SetCallBack>
    DDRB |= (1<<0);
 140:	87 b3       	in	r24, 0x17	; 23
 142:	81 60       	ori	r24, 0x01	; 1
 144:	87 bb       	out	0x17, r24	; 23
	
	while (1) 
    {
		PORTB |= (1<<0);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	2f e3       	ldi	r18, 0x3F	; 63
 14e:	8d e0       	ldi	r24, 0x0D	; 13
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x26>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x30>
 15c:	00 00       	nop
		_delay_ms(1000);
		PORTB &= ~(1<<0);
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	88 bb       	out	0x18, r24	; 24
 164:	2f e3       	ldi	r18, 0x3F	; 63
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x3e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x48>
 174:	00 00       	nop
 176:	e7 cf       	rjmp	.-50     	; 0x146 <main+0x1a>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
