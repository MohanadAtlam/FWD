
ECUAL_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcf  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f7  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ab  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000582  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070d  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 67 00 	call	0xce	; 0xce <main>
  64:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BUTTON_INIT>:
#include "../MCAL/DIO_Driver/DIO_interface.h"
#include "BUTTON.h"


EN_BUTTONError_t BUTTON_INIT(u8 BUTTON_PORT, u8 BUTTON_PIN, u8 BUTTON_INIT_STATE)
{
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	c8 2f       	mov	r28, r24
  74:	d6 2f       	mov	r29, r22
  76:	14 2f       	mov	r17, r20
	//calling the initialization DIO function and initializing the pin to input
	if (DIO_INIT(BUTTON_PORT,BUTTON_PIN,INPUT)==DIO_OK)
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_INIT>
  7e:	81 11       	cpse	r24, r1
  80:	08 c0       	rjmp	.+16     	; 0x92 <BUTTON_INIT+0x26>
	{
		//then putting the state of the pin either pulled up or floating
		if (DIO_SetPinValue(BUTTON_PORT,BUTTON_PIN,BUTTON_INIT_STATE)==DIO_OK)
  82:	41 2f       	mov	r20, r17
  84:	6d 2f       	mov	r22, r29
  86:	8c 2f       	mov	r24, r28
  88:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_SetPinValue>
  8c:	81 11       	cpse	r24, r1
  8e:	03 c0       	rjmp	.+6      	; 0x96 <BUTTON_INIT+0x2a>
  90:	03 c0       	rjmp	.+6      	; 0x98 <BUTTON_INIT+0x2c>
			return BUTTON_INIT_ERROR;
		}
	} 
	else
	{
		return BUTTON_INIT_ERROR;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <BUTTON_INIT+0x2c>
		{
			return BUTTON_OK;
		} 
		else
		{
			return BUTTON_INIT_ERROR;
  96:	81 e0       	ldi	r24, 0x01	; 1
	} 
	else
	{
		return BUTTON_INIT_ERROR;
	}
}
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	1f 91       	pop	r17
  9e:	08 95       	ret

000000a0 <BUTTON_READ>:

EN_BUTTONError_t BUTTON_READ(u8 BUTTON_PORT, u8 BUTTON_PIN, u8 *BUTTON_VALUE)
{
	//calling the dio get pin value to get the current state of the button
	if (DIO_GetPinValue(BUTTON_PORT,BUTTON_PIN,BUTTON_VALUE)==DIO_OK)
  a0:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_GetPinValue>
  a4:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	} 
	else
	{
		return BUTTON_READ_ERROR;
  a6:	82 e0       	ldi	r24, 0x02	; 2
	}
  a8:	08 95       	ret

000000aa <LED_INIT>:
#include "../MCAL/DIO_Driver/DIO_interface.h"
#include "LED.h"

EN_LEDError_t LED_INIT(u8 LED_PORT, u8 LED_PIN)
{
	if (DIO_INIT(LED_PORT,LED_PIN,OUTPUT)==DIO_OK)
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_INIT>
  b0:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_INIT_ERROR;
  b2:	81 e0       	ldi	r24, 0x01	; 1
	}
}
  b4:	08 95       	ret

000000b6 <LED_ON>:

EN_LEDError_t LED_ON(u8 LED_PORT, u8 LED_PIN)
{
	if (DIO_SetPinValue(LED_PORT,LED_PIN,HIGH)==DIO_OK)
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_SetPinValue>
  bc:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ON_ERROR;
  be:	82 e0       	ldi	r24, 0x02	; 2
	}
}
  c0:	08 95       	ret

000000c2 <LED_OFF>:

EN_LEDError_t LED_OFF(u8 LED_PORT, u8 LED_PIN)
{
	if (DIO_SetPinValue(LED_PORT,LED_PIN,LOW)==DIO_OK)
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_SetPinValue>
  c8:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ON_ERROR;
  ca:	82 e0       	ldi	r24, 0x02	; 2
	}
}
  cc:	08 95       	ret

000000ce <main>:
#define BUTTON_PIN		0
#define PULLED_UP		1
#define	FLOATING		0

int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	1f 92       	push	r1
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	u8 ButtonValue;
	if (LED_INIT(LED_PORT,LED_PIN)==LED_OK && BUTTON_INIT(BUTTON_PORT,BUTTON_PIN,PULLED_UP)==BUTTON_OK)
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <LED_INIT>
  e0:	81 11       	cpse	r24, r1
  e2:	31 c0       	rjmp	.+98     	; 0x146 <main+0x78>
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_INIT>
  ee:	81 11       	cpse	r24, r1
  f0:	2a c0       	rjmp	.+84     	; 0x146 <main+0x78>
	{
		while (1)
		{	
			
			if (BUTTON_READ(BUTTON_PORT,BUTTON_PIN,&ButtonValue)==BUTTON_OK)
  f2:	ae 01       	movw	r20, r28
  f4:	4f 5f       	subi	r20, 0xFF	; 255
  f6:	5f 4f       	sbci	r21, 0xFF	; 255
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 50 00 	call	0xa0	; 0xa0 <BUTTON_READ>
 100:	81 11       	cpse	r24, r1
 102:	f7 cf       	rjmp	.-18     	; 0xf2 <main+0x24>
			{
				if (ButtonValue==LOW)
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	81 11       	cpse	r24, r1
 108:	f4 cf       	rjmp	.-24     	; 0xf2 <main+0x24>
				{
					if (LED_ON(LED_PORT,LED_PIN)==LED_OK)
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LED_ON>
 110:	81 11       	cpse	r24, r1
 112:	09 c0       	rjmp	.+18     	; 0x126 <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f e3       	ldi	r18, 0x3F	; 63
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x4c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x56>
 124:	00 00       	nop
					{
						_delay_ms(1000);
					}
					if (LED_OFF(LED_PORT,LED_PIN)==LED_OK)
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LED_OFF>
 12e:	81 11       	cpse	r24, r1
 130:	e0 cf       	rjmp	.-64     	; 0xf2 <main+0x24>
 132:	2f e3       	ldi	r18, 0x3F	; 63
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x6a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x74>
 142:	00 00       	nop
 144:	d6 cf       	rjmp	.-84     	; 0xf2 <main+0x24>
				}
			}
			
		}
	}
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <DIO_INIT>:
			//error handling
			return SET_PORT_ERROR;
			break;
		}
		return DIO_OK;
}
 152:	41 11       	cpse	r20, r1
 154:	3c c0       	rjmp	.+120    	; 0x1ce <DIO_INIT+0x7c>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	99 f0       	breq	.+38     	; 0x180 <DIO_INIT+0x2e>
 15a:	28 f0       	brcs	.+10     	; 0x166 <DIO_INIT+0x14>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	e9 f0       	breq	.+58     	; 0x19a <DIO_INIT+0x48>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	41 f1       	breq	.+80     	; 0x1b4 <DIO_INIT+0x62>
 164:	6e c0       	rjmp	.+220    	; 0x242 <DIO_INIT+0xf0>
 166:	2a b3       	in	r18, 0x1a	; 26
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_INIT+0x20>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_INIT+0x1c>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	8a bb       	out	0x1a, r24	; 26
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_INIT+0x3a>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_INIT+0x36>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	87 bb       	out	0x17, r24	; 23
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	24 b3       	in	r18, 0x14	; 20
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_INIT+0x54>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_INIT+0x50>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	84 bb       	out	0x14, r24	; 20
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
 1b4:	21 b3       	in	r18, 0x11	; 17
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_INIT+0x6e>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_INIT+0x6a>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	81 bb       	out	0x11, r24	; 17
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	d1 f5       	brne	.+116    	; 0x246 <DIO_INIT+0xf4>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 f0       	breq	.+36     	; 0x1fa <DIO_INIT+0xa8>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <DIO_INIT+0x90>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	d9 f0       	breq	.+54     	; 0x212 <DIO_INIT+0xc0>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	29 f1       	breq	.+74     	; 0x22a <DIO_INIT+0xd8>
 1e0:	34 c0       	rjmp	.+104    	; 0x24a <DIO_INIT+0xf8>
 1e2:	2a b3       	in	r18, 0x1a	; 26
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_INIT+0x9c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_INIT+0x98>
 1f2:	82 2b       	or	r24, r18
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
 1fa:	27 b3       	in	r18, 0x17	; 23
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_INIT+0xb4>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_INIT+0xb0>
 20a:	82 2b       	or	r24, r18
 20c:	87 bb       	out	0x17, r24	; 23
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
 212:	24 b3       	in	r18, 0x14	; 20
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_INIT+0xcc>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_INIT+0xc8>
 222:	82 2b       	or	r24, r18
 224:	84 bb       	out	0x14, r24	; 20
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
 22a:	21 b3       	in	r18, 0x11	; 17
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_INIT+0xe4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_INIT+0xe0>
 23a:	82 2b       	or	r24, r18
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret

0000024e <DIO_SetPinValue>:
 24e:	41 11       	cpse	r20, r1
 250:	3c c0       	rjmp	.+120    	; 0x2ca <DIO_SetPinValue+0x7c>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	99 f0       	breq	.+38     	; 0x27c <DIO_SetPinValue+0x2e>
 256:	28 f0       	brcs	.+10     	; 0x262 <DIO_SetPinValue+0x14>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	e9 f0       	breq	.+58     	; 0x296 <DIO_SetPinValue+0x48>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	41 f1       	breq	.+80     	; 0x2b0 <DIO_SetPinValue+0x62>
 260:	6e c0       	rjmp	.+220    	; 0x33e <DIO_SetPinValue+0xf0>
 262:	2b b3       	in	r18, 0x1b	; 27
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPinValue+0x20>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPinValue+0x1c>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	8b bb       	out	0x1b, r24	; 27
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
 27c:	28 b3       	in	r18, 0x18	; 24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_SetPinValue+0x3a>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_SetPinValue+0x36>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	88 bb       	out	0x18, r24	; 24
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	25 b3       	in	r18, 0x15	; 21
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPinValue+0x54>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPinValue+0x50>
 2a6:	80 95       	com	r24
 2a8:	82 23       	and	r24, r18
 2aa:	85 bb       	out	0x15, r24	; 21
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
 2b0:	22 b3       	in	r18, 0x12	; 18
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinValue+0x6e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinValue+0x6a>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	d1 f5       	brne	.+116    	; 0x342 <DIO_SetPinValue+0xf4>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	91 f0       	breq	.+36     	; 0x2f6 <DIO_SetPinValue+0xa8>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <DIO_SetPinValue+0x90>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	d9 f0       	breq	.+54     	; 0x30e <DIO_SetPinValue+0xc0>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	29 f1       	breq	.+74     	; 0x326 <DIO_SetPinValue+0xd8>
 2dc:	34 c0       	rjmp	.+104    	; 0x346 <DIO_SetPinValue+0xf8>
 2de:	2b b3       	in	r18, 0x1b	; 27
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_SetPinValue+0x9c>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_SetPinValue+0x98>
 2ee:	82 2b       	or	r24, r18
 2f0:	8b bb       	out	0x1b, r24	; 27
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
 2f6:	28 b3       	in	r18, 0x18	; 24
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_SetPinValue+0xb4>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_SetPinValue+0xb0>
 306:	82 2b       	or	r24, r18
 308:	88 bb       	out	0x18, r24	; 24
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
 30e:	25 b3       	in	r18, 0x15	; 21
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_SetPinValue+0xcc>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_SetPinValue+0xc8>
 31e:	82 2b       	or	r24, r18
 320:	85 bb       	out	0x15, r24	; 21
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
 326:	22 b3       	in	r18, 0x12	; 18
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_SetPinValue+0xe4>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_SetPinValue+0xe0>
 336:	82 2b       	or	r24, r18
 338:	82 bb       	out	0x12, r24	; 18
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	08 95       	ret
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	08 95       	ret

0000034a <DIO_GetPinValue>:

EN_DIOError_t DIO_GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 *Copy_u8Value)
{
		u8 Local_u8PinValue ;

		switch ( Copy_u8Port )
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	79 f0       	breq	.+30     	; 0x36c <DIO_GetPinValue+0x22>
 34e:	28 f0       	brcs	.+10     	; 0x35a <DIO_GetPinValue+0x10>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	a9 f0       	breq	.+42     	; 0x37e <DIO_GetPinValue+0x34>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	e1 f0       	breq	.+56     	; 0x390 <DIO_GetPinValue+0x46>
 358:	27 c0       	rjmp	.+78     	; 0x3a8 <DIO_GetPinValue+0x5e>
		{
			//getting the pin value
			case DIO_u8PORTA : Local_u8PinValue = GET_BIT(PINA,Copy_u8Pin);
 35a:	89 b3       	in	r24, 0x19	; 25
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_GetPinValue+0x1a>
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_GetPinValue+0x16>
 368:	81 70       	andi	r24, 0x01	; 1
			break;
 36a:	1a c0       	rjmp	.+52     	; 0x3a0 <DIO_GetPinValue+0x56>
			case DIO_u8PORTB : Local_u8PinValue = GET_BIT(PINB,Copy_u8Pin);
 36c:	86 b3       	in	r24, 0x16	; 22
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_GetPinValue+0x2c>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_GetPinValue+0x28>
 37a:	81 70       	andi	r24, 0x01	; 1
			break;
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <DIO_GetPinValue+0x56>
			case DIO_u8PORTC : Local_u8PinValue = GET_BIT(PINC,Copy_u8Pin);
 37e:	83 b3       	in	r24, 0x13	; 19
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_GetPinValue+0x3e>
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_GetPinValue+0x3a>
 38c:	81 70       	andi	r24, 0x01	; 1
			break;
 38e:	08 c0       	rjmp	.+16     	; 0x3a0 <DIO_GetPinValue+0x56>
			case DIO_u8PORTD : Local_u8PinValue = GET_BIT(PIND,Copy_u8Pin);
 390:	80 b3       	in	r24, 0x10	; 16
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_GetPinValue+0x50>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_GetPinValue+0x4c>
 39e:	81 70       	andi	r24, 0x01	; 1
			default:
			//error handling
			return GET_PIN_ERROR;
		}
		//then passing it to the pointer
		*Copy_u8Value = Local_u8PinValue;
 3a0:	fa 01       	movw	r30, r20
 3a2:	80 83       	st	Z, r24

		return DIO_OK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
			break;
			case DIO_u8PORTD : Local_u8PinValue = GET_BIT(PIND,Copy_u8Pin);
			break;
			default:
			//error handling
			return GET_PIN_ERROR;
 3a8:	85 e0       	ldi	r24, 0x05	; 5
		}
		//then passing it to the pointer
		*Copy_u8Value = Local_u8PinValue;

		return DIO_OK;
 3aa:	08 95       	ret

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
