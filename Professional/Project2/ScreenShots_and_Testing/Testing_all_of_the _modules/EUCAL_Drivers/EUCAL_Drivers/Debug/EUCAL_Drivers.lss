
EUCAL_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aee  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000700  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067a  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cf  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000555  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_INIT>:
	}
	else
	{
		return LED_ON_ERROR;
	}
}
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_INIT>
  72:	81 11       	cpse	r24, r1
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	08 95       	ret

00000078 <LED_TOG>:

EN_LEDError_t LED_TOG(u8 LED_PORT, u8 LED_PIN)
{
	if (DIO_TogglePinValue(LED_PORT,LED_PIN)==DIO_OK)
  78:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_TogglePinValue>
  7c:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	} 
	else
	{
		return LED_TOG_ERROR;
  7e:	84 e0       	ldi	r24, 0x04	; 4
	}
  80:	08 95       	ret

00000082 <main>:
#define HIGH			1
#define LOW				0

int main(void)
{
	if (LED_INIT(LED_PORT,LED_PIN)==LED_OK)
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 36 00 	call	0x6c	; 0x6c <LED_INIT>
  8a:	81 11       	cpse	r24, r1
  8c:	10 c0       	rjmp	.+32     	; 0xae <main+0x2c>
	{
		while (1)
		{
			if (LED_TOG(LED_PORT,LED_PIN)==LED_OK)
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 3c 00 	call	0x78	; 0x78 <LED_TOG>
  96:	81 11       	cpse	r24, r1
  98:	fa cf       	rjmp	.-12     	; 0x8e <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e9       	ldi	r18, 0x9F	; 159
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x28>
  aa:	00 00       	nop
  ac:	f0 cf       	rjmp	.-32     	; 0x8e <main+0xc>
			{
				_delay_ms(500);
			}
		}
	}
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <DIO_INIT>:
		else
		{
			//error handling
			return SET_PIN_ERROR;
		}
}
  b4:	41 11       	cpse	r20, r1
  b6:	3c c0       	rjmp	.+120    	; 0x130 <DIO_INIT+0x7c>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	99 f0       	breq	.+38     	; 0xe2 <DIO_INIT+0x2e>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_INIT+0x14>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	e9 f0       	breq	.+58     	; 0xfc <DIO_INIT+0x48>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	41 f1       	breq	.+80     	; 0x116 <DIO_INIT+0x62>
  c6:	6e c0       	rjmp	.+220    	; 0x1a4 <DIO_INIT+0xf0>
  c8:	2a b3       	in	r18, 0x1a	; 26
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_INIT+0x20>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_INIT+0x1c>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret
  e2:	27 b3       	in	r18, 0x17	; 23
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_INIT+0x3a>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_INIT+0x36>
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 95       	ret
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_INIT+0x54>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_INIT+0x50>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret
 116:	21 b3       	in	r18, 0x11	; 17
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_INIT+0x6e>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_INIT+0x6a>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	d1 f5       	brne	.+116    	; 0x1a8 <DIO_INIT+0xf4>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 f0       	breq	.+36     	; 0x15c <DIO_INIT+0xa8>
 138:	28 f0       	brcs	.+10     	; 0x144 <DIO_INIT+0x90>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	d9 f0       	breq	.+54     	; 0x174 <DIO_INIT+0xc0>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	29 f1       	breq	.+74     	; 0x18c <DIO_INIT+0xd8>
 142:	34 c0       	rjmp	.+104    	; 0x1ac <DIO_INIT+0xf8>
 144:	2b b3       	in	r18, 0x1b	; 27
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_INIT+0x9c>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_INIT+0x98>
 154:	82 2b       	or	r24, r18
 156:	8b bb       	out	0x1b, r24	; 27
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret
 15c:	28 b3       	in	r18, 0x18	; 24
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_INIT+0xb4>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_INIT+0xb0>
 16c:	82 2b       	or	r24, r18
 16e:	88 bb       	out	0x18, r24	; 24
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
 174:	25 b3       	in	r18, 0x15	; 21
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_INIT+0xcc>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_INIT+0xc8>
 184:	82 2b       	or	r24, r18
 186:	85 bb       	out	0x15, r24	; 21
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	22 b3       	in	r18, 0x12	; 18
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_INIT+0xe4>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_INIT+0xe0>
 19c:	82 2b       	or	r24, r18
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <DIO_TogglePinValue>:

EN_DIOError_t DIO_TogglePinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
			switch ( Copy_u8Port )
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	91 f0       	breq	.+36     	; 0x1d8 <DIO_TogglePinValue+0x28>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <DIO_TogglePinValue+0x10>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	d9 f0       	breq	.+54     	; 0x1f0 <DIO_TogglePinValue+0x40>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	29 f1       	breq	.+74     	; 0x208 <DIO_TogglePinValue+0x58>
 1be:	30 c0       	rjmp	.+96     	; 0x220 <DIO_TogglePinValue+0x70>
			{
				//toggeling the bit
				case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin);
 1c0:	2b b3       	in	r18, 0x1b	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_TogglePinValue+0x1c>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_TogglePinValue+0x18>
 1d0:	82 27       	eor	r24, r18
 1d2:	8b bb       	out	0x1b, r24	; 27
				default:
				//error handling
				return TOG_PIN_ERROR;
				break;
			}
			return DIO_OK;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
{
			switch ( Copy_u8Port )
			{
				//toggeling the bit
				case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin);
				break;
 1d6:	08 95       	ret
				case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin);
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_TogglePinValue+0x34>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_TogglePinValue+0x30>
 1e8:	82 27       	eor	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
				default:
				//error handling
				return TOG_PIN_ERROR;
				break;
			}
			return DIO_OK;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
			{
				//toggeling the bit
				case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin);
				break;
				case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin);
				break;
 1ee:	08 95       	ret
				case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin);
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_TogglePinValue+0x4c>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_TogglePinValue+0x48>
 200:	82 27       	eor	r24, r18
 202:	85 bb       	out	0x15, r24	; 21
				default:
				//error handling
				return TOG_PIN_ERROR;
				break;
			}
			return DIO_OK;
 204:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin);
				break;
				case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin);
				break;
				case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin);
				break;
 206:	08 95       	ret
				case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin);
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_TogglePinValue+0x64>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_TogglePinValue+0x60>
 218:	82 27       	eor	r24, r18
 21a:	82 bb       	out	0x12, r24	; 18
				default:
				//error handling
				return TOG_PIN_ERROR;
				break;
			}
			return DIO_OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin);
				break;
				case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin);
				break;
				case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin);
				break;
 21e:	08 95       	ret
				default:
				//error handling
				return TOG_PIN_ERROR;
 220:	83 e0       	ldi	r24, 0x03	; 3
				break;
			}
			return DIO_OK;
}
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
