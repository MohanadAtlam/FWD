
TIMER_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000628  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c3  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b0  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  00001b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA |=(1<<0);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		PORTA|=(1<<0);
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	81 60       	ori	r24, 0x01	; 1
  76:	8b bb       	out	0x1b, r24	; 27
		if (TIMER0_DELAY(1));
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	9f e3       	ldi	r25, 0x3F	; 63
  80:	0e 94 4c 00 	call	0x98	; 0x98 <TIMER0_DELAY>
		
		PORTA&= ~(1<<0);
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
		if (TIMER0_DELAY(1));
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	70 e0       	ldi	r23, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	9f e3       	ldi	r25, 0x3F	; 63
  92:	0e 94 4c 00 	call	0x98	; 0x98 <TIMER0_DELAY>
  96:	ed cf       	rjmp	.-38     	; 0x72 <main+0x6>

00000098 <TIMER0_DELAY>:

#include "timer_interface.h"
#include "timer_register.h"

EN_DelayError_t TIMER0_DELAY(f64 time)
{
  98:	4f 92       	push	r4
  9a:	5f 92       	push	r5
  9c:	6f 92       	push	r6
  9e:	7f 92       	push	r7
  a0:	8f 92       	push	r8
  a2:	9f 92       	push	r9
  a4:	af 92       	push	r10
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	6b 01       	movw	r12, r22
  b2:	7c 01       	movw	r14, r24
	u32 No_Of_OverFlows;
	//1.Comparing the input time to maximum time for each prescaler
	if(time<NO_PRESCALER_MAXTIME)
  b4:	2d eb       	ldi	r18, 0xBD	; 189
  b6:	37 e3       	ldi	r19, 0x37	; 55
  b8:	46 e8       	ldi	r20, 0x86	; 134
  ba:	59 e3       	ldi	r21, 0x39	; 57
  bc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__cmpsf2>
  c0:	88 23       	and	r24, r24
  c2:	f4 f4       	brge	.+60     	; 0x100 <TIMER0_DELAY+0x68>
	{
		//2.Choosing the normal mode
		
		TCCR0=0x00;
  c4:	13 be       	out	0x33, r1	; 51
		
		//3.Setting the initial value in TCNT register
		
		TCNT0=(u32)((NO_PRESCALER_MAXTIME-time)/0.000001);
  c6:	a7 01       	movw	r20, r14
  c8:	96 01       	movw	r18, r12
  ca:	6d eb       	ldi	r22, 0xBD	; 189
  cc:	77 e3       	ldi	r23, 0x37	; 55
  ce:	86 e8       	ldi	r24, 0x86	; 134
  d0:	99 e3       	ldi	r25, 0x39	; 57
  d2:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
  d6:	2d eb       	ldi	r18, 0xBD	; 189
  d8:	37 e3       	ldi	r19, 0x37	; 55
  da:	46 e8       	ldi	r20, 0x86	; 134
  dc:	55 e3       	ldi	r21, 0x35	; 53
  de:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
  e2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
  e6:	62 bf       	out	0x32, r22	; 50
		
		//4.Setting the prescaler to no prescaler and start the timer
		
		SET_BIT(TCCR0,CS00);
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	83 bf       	out	0x33, r24	; 51
		
		//5.waiting for the flag to be up
		
		while((TIFR&(1<<0)) == 0);
  ee:	08 b6       	in	r0, 0x38	; 56
  f0:	00 fe       	sbrs	r0, 0
  f2:	fd cf       	rjmp	.-6      	; 0xee <TIMER0_DELAY+0x56>
		
		//6.Writing a logic one to the flag to return it to 0
		
		SET_BIT(TIFR,TOV0);
  f4:	88 b7       	in	r24, 0x38	; 56
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	88 bf       	out	0x38, r24	; 56
		
		//7.Stop the timer
		
		TCCR0=0x00;
  fa:	13 be       	out	0x33, r1	; 51
		
		return DELAY_OK;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	f8 c0       	rjmp	.+496    	; 0x2f0 <TIMER0_DELAY+0x258>
	}
	else if(time<PRESCALER_8_MAXTIME)
 100:	2d eb       	ldi	r18, 0xBD	; 189
 102:	37 e3       	ldi	r19, 0x37	; 55
 104:	46 e0       	ldi	r20, 0x06	; 6
 106:	5b e3       	ldi	r21, 0x3B	; 59
 108:	c7 01       	movw	r24, r14
 10a:	b6 01       	movw	r22, r12
 10c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__cmpsf2>
 110:	88 23       	and	r24, r24
 112:	f4 f4       	brge	.+60     	; 0x150 <TIMER0_DELAY+0xb8>
	{
		//2.Choosing the normal mode
		
		TCCR0=0x00;
 114:	13 be       	out	0x33, r1	; 51
		
		//3.Setting the initial value in TCNT register
		
		TCNT0=(u32)((PRESCALER_8_MAXTIME-time)/0.000008);
 116:	a7 01       	movw	r20, r14
 118:	96 01       	movw	r18, r12
 11a:	6d eb       	ldi	r22, 0xBD	; 189
 11c:	77 e3       	ldi	r23, 0x37	; 55
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	9b e3       	ldi	r25, 0x3B	; 59
 122:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
 126:	2d eb       	ldi	r18, 0xBD	; 189
 128:	37 e3       	ldi	r19, 0x37	; 55
 12a:	46 e0       	ldi	r20, 0x06	; 6
 12c:	57 e3       	ldi	r21, 0x37	; 55
 12e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 132:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 136:	62 bf       	out	0x32, r22	; 50
		
		//4.Setting the prescaler to 8 prescaler and start the timer
		
		SET_BIT(TCCR0,CS01);
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	83 bf       	out	0x33, r24	; 51
		
		//5.waiting for the flag to be up
		
		while((TIFR&(1<<0)) == 0);
 13e:	08 b6       	in	r0, 0x38	; 56
 140:	00 fe       	sbrs	r0, 0
 142:	fd cf       	rjmp	.-6      	; 0x13e <TIMER0_DELAY+0xa6>
		
		//6.Writing a logic one to the flag to return it to 0
		
		SET_BIT(TIFR,TOV0);
 144:	88 b7       	in	r24, 0x38	; 56
 146:	81 60       	ori	r24, 0x01	; 1
 148:	88 bf       	out	0x38, r24	; 56
		
		//7.Stop the timer
		
		TCCR0=0x00;
 14a:	13 be       	out	0x33, r1	; 51
		
		return DELAY_OK;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	d0 c0       	rjmp	.+416    	; 0x2f0 <TIMER0_DELAY+0x258>
	}
	else if(time<PRESCALER_64_MAXTIME)
 150:	2d eb       	ldi	r18, 0xBD	; 189
 152:	37 e3       	ldi	r19, 0x37	; 55
 154:	46 e8       	ldi	r20, 0x86	; 134
 156:	5c e3       	ldi	r21, 0x3C	; 60
 158:	c7 01       	movw	r24, r14
 15a:	b6 01       	movw	r22, r12
 15c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__cmpsf2>
 160:	88 23       	and	r24, r24
 162:	0c f5       	brge	.+66     	; 0x1a6 <TIMER0_DELAY+0x10e>
	{
		//2.Choosing the normal mode
	
		TCCR0=0x00;
 164:	13 be       	out	0x33, r1	; 51
		
		//3.Setting the initial value in TCNT register
		
		TCNT0=(u32)((PRESCALER_64_MAXTIME-time)/0.000064);
 166:	a7 01       	movw	r20, r14
 168:	96 01       	movw	r18, r12
 16a:	6d eb       	ldi	r22, 0xBD	; 189
 16c:	77 e3       	ldi	r23, 0x37	; 55
 16e:	86 e8       	ldi	r24, 0x86	; 134
 170:	9c e3       	ldi	r25, 0x3C	; 60
 172:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
 176:	2d eb       	ldi	r18, 0xBD	; 189
 178:	37 e3       	ldi	r19, 0x37	; 55
 17a:	46 e8       	ldi	r20, 0x86	; 134
 17c:	58 e3       	ldi	r21, 0x38	; 56
 17e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 182:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 186:	62 bf       	out	0x32, r22	; 50
		
		//4.Setting the prescaler to 64 prescaler and start the timer
		
		SET_BIT(TCCR0,CS00);
 188:	83 b7       	in	r24, 0x33	; 51
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	82 60       	ori	r24, 0x02	; 2
 192:	83 bf       	out	0x33, r24	; 51
		
		//5.waiting for the flag to be up
		
		while((TIFR&(1<<0)) == 0);
 194:	08 b6       	in	r0, 0x38	; 56
 196:	00 fe       	sbrs	r0, 0
 198:	fd cf       	rjmp	.-6      	; 0x194 <TIMER0_DELAY+0xfc>
		
		//6.Writing a logic one to the flag to return it to 0
		
		SET_BIT(TIFR,TOV0);
 19a:	88 b7       	in	r24, 0x38	; 56
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	88 bf       	out	0x38, r24	; 56
		
		//7.Stop the timer
		
		TCCR0=0x00;
 1a0:	13 be       	out	0x33, r1	; 51

		return DELAY_OK;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	a5 c0       	rjmp	.+330    	; 0x2f0 <TIMER0_DELAY+0x258>
	}
	else if(time<PRESCALER_256_MAXTIME)
 1a6:	2d eb       	ldi	r18, 0xBD	; 189
 1a8:	37 e3       	ldi	r19, 0x37	; 55
 1aa:	46 e8       	ldi	r20, 0x86	; 134
 1ac:	5d e3       	ldi	r21, 0x3D	; 61
 1ae:	c7 01       	movw	r24, r14
 1b0:	b6 01       	movw	r22, r12
 1b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__cmpsf2>
 1b6:	88 23       	and	r24, r24
 1b8:	f4 f4       	brge	.+60     	; 0x1f6 <TIMER0_DELAY+0x15e>
	{
		//2.Choosing the normal mode
	
		TCCR0=0x00;
 1ba:	13 be       	out	0x33, r1	; 51
		
		//3.Setting the initial value in TCNT register
		
		TCNT0=(u32)((PRESCALER_256_MAXTIME-time)/0.000256);
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	6d eb       	ldi	r22, 0xBD	; 189
 1c2:	77 e3       	ldi	r23, 0x37	; 55
 1c4:	86 e8       	ldi	r24, 0x86	; 134
 1c6:	9d e3       	ldi	r25, 0x3D	; 61
 1c8:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
 1cc:	2d eb       	ldi	r18, 0xBD	; 189
 1ce:	37 e3       	ldi	r19, 0x37	; 55
 1d0:	46 e8       	ldi	r20, 0x86	; 134
 1d2:	59 e3       	ldi	r21, 0x39	; 57
 1d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 1d8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 1dc:	62 bf       	out	0x32, r22	; 50
		
		//4.Setting the prescaler to 256 prescaler and start the timer
		
		SET_BIT(TCCR0,CS02);
 1de:	83 b7       	in	r24, 0x33	; 51
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	83 bf       	out	0x33, r24	; 51
		
		//5.waiting for the flag to be up
		
		while((TIFR&(1<<0)) == 0);
 1e4:	08 b6       	in	r0, 0x38	; 56
 1e6:	00 fe       	sbrs	r0, 0
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <TIMER0_DELAY+0x14c>
		
		//6.Writing a logic one to the flag to return it to 0
		
		SET_BIT(TIFR,TOV0);
 1ea:	88 b7       	in	r24, 0x38	; 56
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	88 bf       	out	0x38, r24	; 56
		
		//7.Stop the timer
		
		TCCR0=0x00;
 1f0:	13 be       	out	0x33, r1	; 51

		return DELAY_OK;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	7d c0       	rjmp	.+250    	; 0x2f0 <TIMER0_DELAY+0x258>
	}
	else if(time<PRESCALER_1024_MAXTIME)
 1f6:	2d eb       	ldi	r18, 0xBD	; 189
 1f8:	37 e3       	ldi	r19, 0x37	; 55
 1fa:	46 e8       	ldi	r20, 0x86	; 134
 1fc:	5e e3       	ldi	r21, 0x3E	; 62
 1fe:	c7 01       	movw	r24, r14
 200:	b6 01       	movw	r22, r12
 202:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__cmpsf2>
 206:	88 23       	and	r24, r24
 208:	0c f5       	brge	.+66     	; 0x24c <TIMER0_DELAY+0x1b4>
	{
		//2.Choosing the normal mode
		
		TCCR0=0x00;
 20a:	13 be       	out	0x33, r1	; 51
		
		//3.Setting the initial value in TCNT register
		
		TCNT0=(u32)((PRESCALER_1024_MAXTIME-time)/0.001024);
 20c:	a7 01       	movw	r20, r14
 20e:	96 01       	movw	r18, r12
 210:	6d eb       	ldi	r22, 0xBD	; 189
 212:	77 e3       	ldi	r23, 0x37	; 55
 214:	86 e8       	ldi	r24, 0x86	; 134
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
 21c:	2d eb       	ldi	r18, 0xBD	; 189
 21e:	37 e3       	ldi	r19, 0x37	; 55
 220:	46 e8       	ldi	r20, 0x86	; 134
 222:	5a e3       	ldi	r21, 0x3A	; 58
 224:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 228:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 22c:	62 bf       	out	0x32, r22	; 50
		
		//4.Setting the prescaler to 1024 prescaler and start the timer
		
		SET_BIT(TCCR0,CS00);
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	81 60       	ori	r24, 0x01	; 1
 232:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
 234:	83 b7       	in	r24, 0x33	; 51
 236:	84 60       	ori	r24, 0x04	; 4
 238:	83 bf       	out	0x33, r24	; 51
		
		//5.waiting for the flag to be up
		
		while((TIFR&(1<<0)) == 0);
 23a:	08 b6       	in	r0, 0x38	; 56
 23c:	00 fe       	sbrs	r0, 0
 23e:	fd cf       	rjmp	.-6      	; 0x23a <TIMER0_DELAY+0x1a2>
		
		//6.Writing a logic one to the flag to return it to 0
		
		SET_BIT(TIFR,TOV0);
 240:	88 b7       	in	r24, 0x38	; 56
 242:	81 60       	ori	r24, 0x01	; 1
 244:	88 bf       	out	0x38, r24	; 56
		
		//7.Stop the timer
		
		TCCR0=0x00;
 246:	13 be       	out	0x33, r1	; 51

		return DELAY_OK;		
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	52 c0       	rjmp	.+164    	; 0x2f0 <TIMER0_DELAY+0x258>
	}
	else if(time>PRESCALER_1024_MAXTIME)
 24c:	2d eb       	ldi	r18, 0xBD	; 189
 24e:	37 e3       	ldi	r19, 0x37	; 55
 250:	46 e8       	ldi	r20, 0x86	; 134
 252:	5e e3       	ldi	r21, 0x3E	; 62
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	0e 94 0d 03 	call	0x61a	; 0x61a <__gesf2>
 25c:	18 16       	cp	r1, r24
 25e:	0c f0       	brlt	.+2      	; 0x262 <TIMER0_DELAY+0x1ca>
 260:	46 c0       	rjmp	.+140    	; 0x2ee <TIMER0_DELAY+0x256>
	{
		//2.Counting number of over flows
		
		No_Of_OverFlows=(time/PRESCALER_1024_MAXTIME)+1;
 262:	2d eb       	ldi	r18, 0xBD	; 189
 264:	37 e3       	ldi	r19, 0x37	; 55
 266:	46 e8       	ldi	r20, 0x86	; 134
 268:	5e e3       	ldi	r21, 0x3E	; 62
 26a:	c7 01       	movw	r24, r14
 26c:	b6 01       	movw	r22, r12
 26e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 272:	2b 01       	movw	r4, r22
 274:	3c 01       	movw	r6, r24
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e8       	ldi	r20, 0x80	; 128
 27c:	5f e3       	ldi	r21, 0x3F	; 63
 27e:	0e 94 86 01 	call	0x30c	; 0x30c <__addsf3>
 282:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 286:	4b 01       	movw	r8, r22
 288:	5c 01       	movw	r10, r24
		
		while (No_Of_OverFlows)
 28a:	29 c0       	rjmp	.+82     	; 0x2de <TIMER0_DELAY+0x246>
		{
			//3.Choosing the normal mode
					
			TCCR0=0x00;
 28c:	13 be       	out	0x33, r1	; 51
			
			//4.Setting the initial value in TCNT register
		
			TCNT0=(u32)(256-((time/0.001024)/(time/PRESCALER_1024_MAXTIME)));
 28e:	2d eb       	ldi	r18, 0xBD	; 189
 290:	37 e3       	ldi	r19, 0x37	; 55
 292:	46 e8       	ldi	r20, 0x86	; 134
 294:	5a e3       	ldi	r21, 0x3A	; 58
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 29e:	a3 01       	movw	r20, r6
 2a0:	92 01       	movw	r18, r4
 2a2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3>
 2a6:	9b 01       	movw	r18, r22
 2a8:	ac 01       	movw	r20, r24
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	93 e4       	ldi	r25, 0x43	; 67
 2b2:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
 2b6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 2ba:	62 bf       	out	0x32, r22	; 50
		
			//5.Setting the prescaler to 1024 prescaler and start the timer
		
			SET_BIT(TCCR0,CS00);
 2bc:	83 b7       	in	r24, 0x33	; 51
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS02);
 2c2:	83 b7       	in	r24, 0x33	; 51
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	83 bf       	out	0x33, r24	; 51
		
			//6.waiting for the flag to be up
		
			while((TIFR&(1<<0)) == 0);
 2c8:	08 b6       	in	r0, 0x38	; 56
 2ca:	00 fe       	sbrs	r0, 0
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <TIMER0_DELAY+0x230>
		
			//7.Writing a logic one to the flag to return it to 0
		
			SET_BIT(TIFR,TOV0);
 2ce:	88 b7       	in	r24, 0x38	; 56
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	88 bf       	out	0x38, r24	; 56
			
			//8.Decreasing the variable of number of over flows
			
			No_Of_OverFlows--;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	88 1a       	sub	r8, r24
 2d8:	91 08       	sbc	r9, r1
 2da:	a1 08       	sbc	r10, r1
 2dc:	b1 08       	sbc	r11, r1
	{
		//2.Counting number of over flows
		
		No_Of_OverFlows=(time/PRESCALER_1024_MAXTIME)+1;
		
		while (No_Of_OverFlows)
 2de:	81 14       	cp	r8, r1
 2e0:	91 04       	cpc	r9, r1
 2e2:	a1 04       	cpc	r10, r1
 2e4:	b1 04       	cpc	r11, r1
 2e6:	91 f6       	brne	.-92     	; 0x28c <TIMER0_DELAY+0x1f4>
			No_Of_OverFlows--;
		}
		
		//8.Stop the timer
		
		TCCR0=0x00;
 2e8:	13 be       	out	0x33, r1	; 51

		return DELAY_OK;		
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <TIMER0_DELAY+0x258>
	}
	else
	{
		return DELAY_ERROR;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	return DELAY_ERROR;
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	bf 90       	pop	r11
 2fa:	af 90       	pop	r10
 2fc:	9f 90       	pop	r9
 2fe:	8f 90       	pop	r8
 300:	7f 90       	pop	r7
 302:	6f 90       	pop	r6
 304:	5f 90       	pop	r5
 306:	4f 90       	pop	r4
 308:	08 95       	ret

0000030a <__subsf3>:
 30a:	50 58       	subi	r21, 0x80	; 128

0000030c <__addsf3>:
 30c:	bb 27       	eor	r27, r27
 30e:	aa 27       	eor	r26, r26
 310:	0e 94 9d 01 	call	0x33a	; 0x33a <__addsf3x>
 314:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_round>
 318:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_pscA>
 31c:	38 f0       	brcs	.+14     	; 0x32c <__addsf3+0x20>
 31e:	0e 94 cc 02 	call	0x598	; 0x598 <__fp_pscB>
 322:	20 f0       	brcs	.+8      	; 0x32c <__addsf3+0x20>
 324:	39 f4       	brne	.+14     	; 0x334 <__addsf3+0x28>
 326:	9f 3f       	cpi	r25, 0xFF	; 255
 328:	19 f4       	brne	.+6      	; 0x330 <__addsf3+0x24>
 32a:	26 f4       	brtc	.+8      	; 0x334 <__addsf3+0x28>
 32c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_nan>
 330:	0e f4       	brtc	.+2      	; 0x334 <__addsf3+0x28>
 332:	e0 95       	com	r30
 334:	e7 fb       	bst	r30, 7
 336:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_inf>

0000033a <__addsf3x>:
 33a:	e9 2f       	mov	r30, r25
 33c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_split3>
 340:	58 f3       	brcs	.-42     	; 0x318 <__addsf3+0xc>
 342:	ba 17       	cp	r27, r26
 344:	62 07       	cpc	r22, r18
 346:	73 07       	cpc	r23, r19
 348:	84 07       	cpc	r24, r20
 34a:	95 07       	cpc	r25, r21
 34c:	20 f0       	brcs	.+8      	; 0x356 <__addsf3x+0x1c>
 34e:	79 f4       	brne	.+30     	; 0x36e <__addsf3x+0x34>
 350:	a6 f5       	brtc	.+104    	; 0x3ba <__addsf3x+0x80>
 352:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_zero>
 356:	0e f4       	brtc	.+2      	; 0x35a <__addsf3x+0x20>
 358:	e0 95       	com	r30
 35a:	0b 2e       	mov	r0, r27
 35c:	ba 2f       	mov	r27, r26
 35e:	a0 2d       	mov	r26, r0
 360:	0b 01       	movw	r0, r22
 362:	b9 01       	movw	r22, r18
 364:	90 01       	movw	r18, r0
 366:	0c 01       	movw	r0, r24
 368:	ca 01       	movw	r24, r20
 36a:	a0 01       	movw	r20, r0
 36c:	11 24       	eor	r1, r1
 36e:	ff 27       	eor	r31, r31
 370:	59 1b       	sub	r21, r25
 372:	99 f0       	breq	.+38     	; 0x39a <__addsf3x+0x60>
 374:	59 3f       	cpi	r21, 0xF9	; 249
 376:	50 f4       	brcc	.+20     	; 0x38c <__addsf3x+0x52>
 378:	50 3e       	cpi	r21, 0xE0	; 224
 37a:	68 f1       	brcs	.+90     	; 0x3d6 <__addsf3x+0x9c>
 37c:	1a 16       	cp	r1, r26
 37e:	f0 40       	sbci	r31, 0x00	; 0
 380:	a2 2f       	mov	r26, r18
 382:	23 2f       	mov	r18, r19
 384:	34 2f       	mov	r19, r20
 386:	44 27       	eor	r20, r20
 388:	58 5f       	subi	r21, 0xF8	; 248
 38a:	f3 cf       	rjmp	.-26     	; 0x372 <__addsf3x+0x38>
 38c:	46 95       	lsr	r20
 38e:	37 95       	ror	r19
 390:	27 95       	ror	r18
 392:	a7 95       	ror	r26
 394:	f0 40       	sbci	r31, 0x00	; 0
 396:	53 95       	inc	r21
 398:	c9 f7       	brne	.-14     	; 0x38c <__addsf3x+0x52>
 39a:	7e f4       	brtc	.+30     	; 0x3ba <__addsf3x+0x80>
 39c:	1f 16       	cp	r1, r31
 39e:	ba 0b       	sbc	r27, r26
 3a0:	62 0b       	sbc	r22, r18
 3a2:	73 0b       	sbc	r23, r19
 3a4:	84 0b       	sbc	r24, r20
 3a6:	ba f0       	brmi	.+46     	; 0x3d6 <__addsf3x+0x9c>
 3a8:	91 50       	subi	r25, 0x01	; 1
 3aa:	a1 f0       	breq	.+40     	; 0x3d4 <__addsf3x+0x9a>
 3ac:	ff 0f       	add	r31, r31
 3ae:	bb 1f       	adc	r27, r27
 3b0:	66 1f       	adc	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	c2 f7       	brpl	.-16     	; 0x3a8 <__addsf3x+0x6e>
 3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <__addsf3x+0x9c>
 3ba:	ba 0f       	add	r27, r26
 3bc:	62 1f       	adc	r22, r18
 3be:	73 1f       	adc	r23, r19
 3c0:	84 1f       	adc	r24, r20
 3c2:	48 f4       	brcc	.+18     	; 0x3d6 <__addsf3x+0x9c>
 3c4:	87 95       	ror	r24
 3c6:	77 95       	ror	r23
 3c8:	67 95       	ror	r22
 3ca:	b7 95       	ror	r27
 3cc:	f7 95       	ror	r31
 3ce:	9e 3f       	cpi	r25, 0xFE	; 254
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <__addsf3x+0x9a>
 3d2:	b0 cf       	rjmp	.-160    	; 0x334 <__addsf3+0x28>
 3d4:	93 95       	inc	r25
 3d6:	88 0f       	add	r24, r24
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <__addsf3x+0xa2>
 3da:	99 27       	eor	r25, r25
 3dc:	ee 0f       	add	r30, r30
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	08 95       	ret

000003e4 <__cmpsf2>:
 3e4:	0e 94 98 02 	call	0x530	; 0x530 <__fp_cmp>
 3e8:	08 f4       	brcc	.+2      	; 0x3ec <__cmpsf2+0x8>
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	08 95       	ret

000003ee <__divsf3>:
 3ee:	0e 94 0b 02 	call	0x416	; 0x416 <__divsf3x>
 3f2:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_round>
 3f6:	0e 94 cc 02 	call	0x598	; 0x598 <__fp_pscB>
 3fa:	58 f0       	brcs	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fc:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_pscA>
 400:	40 f0       	brcs	.+16     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 402:	29 f4       	brne	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 404:	5f 3f       	cpi	r21, 0xFF	; 255
 406:	29 f0       	breq	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 408:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_inf>
 40c:	51 11       	cpse	r21, r1
 40e:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_szero>
 412:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_nan>

00000416 <__divsf3x>:
 416:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_split3>
 41a:	68 f3       	brcs	.-38     	; 0x3f6 <__divsf3+0x8>

0000041c <__divsf3_pse>:
 41c:	99 23       	and	r25, r25
 41e:	b1 f3       	breq	.-20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 420:	55 23       	and	r21, r21
 422:	91 f3       	breq	.-28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 424:	95 1b       	sub	r25, r21
 426:	55 0b       	sbc	r21, r21
 428:	bb 27       	eor	r27, r27
 42a:	aa 27       	eor	r26, r26
 42c:	62 17       	cp	r22, r18
 42e:	73 07       	cpc	r23, r19
 430:	84 07       	cpc	r24, r20
 432:	38 f0       	brcs	.+14     	; 0x442 <__divsf3_pse+0x26>
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	22 0f       	add	r18, r18
 43a:	33 1f       	adc	r19, r19
 43c:	44 1f       	adc	r20, r20
 43e:	aa 1f       	adc	r26, r26
 440:	a9 f3       	breq	.-22     	; 0x42c <__divsf3_pse+0x10>
 442:	35 d0       	rcall	.+106    	; 0x4ae <__divsf3_pse+0x92>
 444:	0e 2e       	mov	r0, r30
 446:	3a f0       	brmi	.+14     	; 0x456 <__divsf3_pse+0x3a>
 448:	e0 e8       	ldi	r30, 0x80	; 128
 44a:	32 d0       	rcall	.+100    	; 0x4b0 <__divsf3_pse+0x94>
 44c:	91 50       	subi	r25, 0x01	; 1
 44e:	50 40       	sbci	r21, 0x00	; 0
 450:	e6 95       	lsr	r30
 452:	00 1c       	adc	r0, r0
 454:	ca f7       	brpl	.-14     	; 0x448 <__divsf3_pse+0x2c>
 456:	2b d0       	rcall	.+86     	; 0x4ae <__divsf3_pse+0x92>
 458:	fe 2f       	mov	r31, r30
 45a:	29 d0       	rcall	.+82     	; 0x4ae <__divsf3_pse+0x92>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	bb 1f       	adc	r27, r27
 464:	26 17       	cp	r18, r22
 466:	37 07       	cpc	r19, r23
 468:	48 07       	cpc	r20, r24
 46a:	ab 07       	cpc	r26, r27
 46c:	b0 e8       	ldi	r27, 0x80	; 128
 46e:	09 f0       	breq	.+2      	; 0x472 <__divsf3_pse+0x56>
 470:	bb 0b       	sbc	r27, r27
 472:	80 2d       	mov	r24, r0
 474:	bf 01       	movw	r22, r30
 476:	ff 27       	eor	r31, r31
 478:	93 58       	subi	r25, 0x83	; 131
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	3a f0       	brmi	.+14     	; 0x48c <__divsf3_pse+0x70>
 47e:	9e 3f       	cpi	r25, 0xFE	; 254
 480:	51 05       	cpc	r21, r1
 482:	78 f0       	brcs	.+30     	; 0x4a2 <__divsf3_pse+0x86>
 484:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_inf>
 488:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_szero>
 48c:	5f 3f       	cpi	r21, 0xFF	; 255
 48e:	e4 f3       	brlt	.-8      	; 0x488 <__divsf3_pse+0x6c>
 490:	98 3e       	cpi	r25, 0xE8	; 232
 492:	d4 f3       	brlt	.-12     	; 0x488 <__divsf3_pse+0x6c>
 494:	86 95       	lsr	r24
 496:	77 95       	ror	r23
 498:	67 95       	ror	r22
 49a:	b7 95       	ror	r27
 49c:	f7 95       	ror	r31
 49e:	9f 5f       	subi	r25, 0xFF	; 255
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__divsf3_pse+0x78>
 4a2:	88 0f       	add	r24, r24
 4a4:	91 1d       	adc	r25, r1
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret
 4ae:	e1 e0       	ldi	r30, 0x01	; 1
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	bb 1f       	adc	r27, r27
 4b8:	62 17       	cp	r22, r18
 4ba:	73 07       	cpc	r23, r19
 4bc:	84 07       	cpc	r24, r20
 4be:	ba 07       	cpc	r27, r26
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <__divsf3_pse+0xae>
 4c2:	62 1b       	sub	r22, r18
 4c4:	73 0b       	sbc	r23, r19
 4c6:	84 0b       	sbc	r24, r20
 4c8:	ba 0b       	sbc	r27, r26
 4ca:	ee 1f       	adc	r30, r30
 4cc:	88 f7       	brcc	.-30     	; 0x4b0 <__divsf3_pse+0x94>
 4ce:	e0 95       	com	r30
 4d0:	08 95       	ret

000004d2 <__fixunssfsi>:
 4d2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__fp_splitA>
 4d6:	88 f0       	brcs	.+34     	; 0x4fa <__fixunssfsi+0x28>
 4d8:	9f 57       	subi	r25, 0x7F	; 127
 4da:	98 f0       	brcs	.+38     	; 0x502 <__fixunssfsi+0x30>
 4dc:	b9 2f       	mov	r27, r25
 4de:	99 27       	eor	r25, r25
 4e0:	b7 51       	subi	r27, 0x17	; 23
 4e2:	b0 f0       	brcs	.+44     	; 0x510 <__fixunssfsi+0x3e>
 4e4:	e1 f0       	breq	.+56     	; 0x51e <__fixunssfsi+0x4c>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	1a f0       	brmi	.+6      	; 0x4f6 <__fixunssfsi+0x24>
 4f0:	ba 95       	dec	r27
 4f2:	c9 f7       	brne	.-14     	; 0x4e6 <__fixunssfsi+0x14>
 4f4:	14 c0       	rjmp	.+40     	; 0x51e <__fixunssfsi+0x4c>
 4f6:	b1 30       	cpi	r27, 0x01	; 1
 4f8:	91 f0       	breq	.+36     	; 0x51e <__fixunssfsi+0x4c>
 4fa:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_zero>
 4fe:	b1 e0       	ldi	r27, 0x01	; 1
 500:	08 95       	ret
 502:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_zero>
 506:	67 2f       	mov	r22, r23
 508:	78 2f       	mov	r23, r24
 50a:	88 27       	eor	r24, r24
 50c:	b8 5f       	subi	r27, 0xF8	; 248
 50e:	39 f0       	breq	.+14     	; 0x51e <__fixunssfsi+0x4c>
 510:	b9 3f       	cpi	r27, 0xF9	; 249
 512:	cc f3       	brlt	.-14     	; 0x506 <__fixunssfsi+0x34>
 514:	86 95       	lsr	r24
 516:	77 95       	ror	r23
 518:	67 95       	ror	r22
 51a:	b3 95       	inc	r27
 51c:	d9 f7       	brne	.-10     	; 0x514 <__fixunssfsi+0x42>
 51e:	3e f4       	brtc	.+14     	; 0x52e <__fixunssfsi+0x5c>
 520:	90 95       	com	r25
 522:	80 95       	com	r24
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	08 95       	ret

00000530 <__fp_cmp>:
 530:	99 0f       	add	r25, r25
 532:	00 08       	sbc	r0, r0
 534:	55 0f       	add	r21, r21
 536:	aa 0b       	sbc	r26, r26
 538:	e0 e8       	ldi	r30, 0x80	; 128
 53a:	fe ef       	ldi	r31, 0xFE	; 254
 53c:	16 16       	cp	r1, r22
 53e:	17 06       	cpc	r1, r23
 540:	e8 07       	cpc	r30, r24
 542:	f9 07       	cpc	r31, r25
 544:	c0 f0       	brcs	.+48     	; 0x576 <__fp_cmp+0x46>
 546:	12 16       	cp	r1, r18
 548:	13 06       	cpc	r1, r19
 54a:	e4 07       	cpc	r30, r20
 54c:	f5 07       	cpc	r31, r21
 54e:	98 f0       	brcs	.+38     	; 0x576 <__fp_cmp+0x46>
 550:	62 1b       	sub	r22, r18
 552:	73 0b       	sbc	r23, r19
 554:	84 0b       	sbc	r24, r20
 556:	95 0b       	sbc	r25, r21
 558:	39 f4       	brne	.+14     	; 0x568 <__fp_cmp+0x38>
 55a:	0a 26       	eor	r0, r26
 55c:	61 f0       	breq	.+24     	; 0x576 <__fp_cmp+0x46>
 55e:	23 2b       	or	r18, r19
 560:	24 2b       	or	r18, r20
 562:	25 2b       	or	r18, r21
 564:	21 f4       	brne	.+8      	; 0x56e <__fp_cmp+0x3e>
 566:	08 95       	ret
 568:	0a 26       	eor	r0, r26
 56a:	09 f4       	brne	.+2      	; 0x56e <__fp_cmp+0x3e>
 56c:	a1 40       	sbci	r26, 0x01	; 1
 56e:	a6 95       	lsr	r26
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	81 1d       	adc	r24, r1
 574:	81 1d       	adc	r24, r1
 576:	08 95       	ret

00000578 <__fp_inf>:
 578:	97 f9       	bld	r25, 7
 57a:	9f 67       	ori	r25, 0x7F	; 127
 57c:	80 e8       	ldi	r24, 0x80	; 128
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	08 95       	ret

00000584 <__fp_nan>:
 584:	9f ef       	ldi	r25, 0xFF	; 255
 586:	80 ec       	ldi	r24, 0xC0	; 192
 588:	08 95       	ret

0000058a <__fp_pscA>:
 58a:	00 24       	eor	r0, r0
 58c:	0a 94       	dec	r0
 58e:	16 16       	cp	r1, r22
 590:	17 06       	cpc	r1, r23
 592:	18 06       	cpc	r1, r24
 594:	09 06       	cpc	r0, r25
 596:	08 95       	ret

00000598 <__fp_pscB>:
 598:	00 24       	eor	r0, r0
 59a:	0a 94       	dec	r0
 59c:	12 16       	cp	r1, r18
 59e:	13 06       	cpc	r1, r19
 5a0:	14 06       	cpc	r1, r20
 5a2:	05 06       	cpc	r0, r21
 5a4:	08 95       	ret

000005a6 <__fp_round>:
 5a6:	09 2e       	mov	r0, r25
 5a8:	03 94       	inc	r0
 5aa:	00 0c       	add	r0, r0
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__fp_round+0xc>
 5ae:	88 23       	and	r24, r24
 5b0:	52 f0       	brmi	.+20     	; 0x5c6 <__fp_round+0x20>
 5b2:	bb 0f       	add	r27, r27
 5b4:	40 f4       	brcc	.+16     	; 0x5c6 <__fp_round+0x20>
 5b6:	bf 2b       	or	r27, r31
 5b8:	11 f4       	brne	.+4      	; 0x5be <__fp_round+0x18>
 5ba:	60 ff       	sbrs	r22, 0
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <__fp_round+0x20>
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <__fp_split3>:
 5c8:	57 fd       	sbrc	r21, 7
 5ca:	90 58       	subi	r25, 0x80	; 128
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	59 f0       	breq	.+22     	; 0x5e8 <__fp_splitA+0x10>
 5d2:	5f 3f       	cpi	r21, 0xFF	; 255
 5d4:	71 f0       	breq	.+28     	; 0x5f2 <__fp_splitA+0x1a>
 5d6:	47 95       	ror	r20

000005d8 <__fp_splitA>:
 5d8:	88 0f       	add	r24, r24
 5da:	97 fb       	bst	r25, 7
 5dc:	99 1f       	adc	r25, r25
 5de:	61 f0       	breq	.+24     	; 0x5f8 <__fp_splitA+0x20>
 5e0:	9f 3f       	cpi	r25, 0xFF	; 255
 5e2:	79 f0       	breq	.+30     	; 0x602 <__fp_splitA+0x2a>
 5e4:	87 95       	ror	r24
 5e6:	08 95       	ret
 5e8:	12 16       	cp	r1, r18
 5ea:	13 06       	cpc	r1, r19
 5ec:	14 06       	cpc	r1, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	f2 cf       	rjmp	.-28     	; 0x5d6 <__fp_split3+0xe>
 5f2:	46 95       	lsr	r20
 5f4:	f1 df       	rcall	.-30     	; 0x5d8 <__fp_splitA>
 5f6:	08 c0       	rjmp	.+16     	; 0x608 <__fp_splitA+0x30>
 5f8:	16 16       	cp	r1, r22
 5fa:	17 06       	cpc	r1, r23
 5fc:	18 06       	cpc	r1, r24
 5fe:	99 1f       	adc	r25, r25
 600:	f1 cf       	rjmp	.-30     	; 0x5e4 <__fp_splitA+0xc>
 602:	86 95       	lsr	r24
 604:	71 05       	cpc	r23, r1
 606:	61 05       	cpc	r22, r1
 608:	08 94       	sec
 60a:	08 95       	ret

0000060c <__fp_zero>:
 60c:	e8 94       	clt

0000060e <__fp_szero>:
 60e:	bb 27       	eor	r27, r27
 610:	66 27       	eor	r22, r22
 612:	77 27       	eor	r23, r23
 614:	cb 01       	movw	r24, r22
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <__gesf2>:
 61a:	0e 94 98 02 	call	0x530	; 0x530 <__fp_cmp>
 61e:	08 f4       	brcc	.+2      	; 0x622 <__gesf2+0x8>
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
